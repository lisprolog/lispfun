(defun name-field(record)
	(nth 0 record))
(defun first-name (name)
	(nth 0 name))
(defun build-record ( name salary emp-number)
	(list name salary emp-number))
(defun replace-salary-field (record new-salary)
	(build-record (name-field record)
	new-salary
	(number-field record)))
(defun my-member (element list)
	(cond ((null list) nil)
		((equal element (car list)) list)
			(t(my-member element (cdr list)))))
(defun my-length(list)
	(cond ((null list) 0)
		(t(+(my-length(cdr list))1))))
(defun my-nth (n list)
	(cond ((zerop n) (car list))
		(t(my-nth(- n 1)(cdr list)))))
(defun filter-negatives(number-list)
	(cond ((null number-list) nil)
		((plusp (car number-list)) (cons (car number-list)
			(filter-negatives (cdr number-list))))
			(t(filter-negatives(cdr number-list)))))
(defun my-append(list1 list2)
	(cond ((null list1) list2)
		(t(cons(car list1)(my-append (cdr list1)list2)))))
(defun count-atoms(list)
	(cond((null list)0)
		((atom list)1)
		(t(+(count-atoms(car list))
		(count-atoms(cdr list))))))
(defun flatten(lst)
	(cond ((null lst)nil)
		((atom lst)(list lst))
		(t(append(flatten(car lst))(flatten(cdr lst))))))
(defun f(x)
	(set 'inc(+ inc 1))
	(+ x inc))
(defun quad-roots-1 (a b c)
	(setq temp (sqrt (-(* b b)(* 4 a c))))
		(list(/(+(-b) temp) (* 2 a))
			(/(-(-b) temp)(* 2 a))))
(defun quad-roots-2 (a b c)
(let(temp)
	(setq temp (sqrt(-(* b b) (* 4 a c))))
	(list(/(+(- b) temp)(* 2 a))
		(/(-(-b)temp)(* 2 a)))))
(defun quad-roots-3 (a b c)
(let((temp (sqrt(-(* b b)(* 4 a c))))
	(denom(* 2 a)))
	(list(/(+(-b)temp)denom)
		(/(-(-b) temp)denom))))
